--- teensy3.orig/main.cpp
+++ /dev/null
@@ -1,28 +0,0 @@
-#include "WProgram.h"
-
-extern "C" int main(void)
-{
-#ifdef USING_MAKEFILE
-
-	// To use Teensy 3.0 without Arduino, simply put your code here.
-	// For example:
-
-	pinMode(13, OUTPUT);
-	while (1) {
-		digitalWriteFast(13, HIGH);
-		delay(500);
-		digitalWriteFast(13, LOW);
-		delay(500);
-	}
-
-
-#else
-	// Arduino's main() function just calls setup() and loop()....
-	setup();
-	while (1) {
-		loop();
-		yield();
-	}
-#endif
-}
-
--- teensy3.orig/usb_audio.cpp
+++ teensy3/usb_audio.cpp
@@ -1,38 +1,17 @@
-/* Teensyduino Core Library
- * http://www.pjrc.com/teensy/
- * Copyright (c) 2016 PJRC.COM, LLC.
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files (the
- * "Software"), to deal in the Software without restriction, including
- * without limitation the rights to use, copy, modify, merge, publish,
- * distribute, sublicense, and/or sell copies of the Software, and to
- * permit persons to whom the Software is furnished to do so, subject to
- * the following conditions:
- *
- * 1. The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * 2. If the Software is incorporated into a build system that allows
- * selection among a list of target devices, then similar target
- * devices manufactured by PJRC.COM must be included in the list of
- * target devices and selectable in the same manner.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
- * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
- * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- */
+// Berry Audio
+// Â©2017 Yuichiro Nakada
 
 #include "usb_dev.h"
 #include "usb_audio.h"
-#include "HardwareSerial.h"
-#include <string.h> // for memcpy()
+#include "usb_seremu.h"
 
+//#define DEBUG
+#ifdef DEBUG
+#define debug(...)	Serial.printf(__VA_ARGS__)
+#else
+#define debug(...)
+#endif
+
 #ifdef AUDIO_INTERFACE // defined by usb_dev.h -> usb_desc.h
 #if F_CPU >= 20000000
 
@@ -41,272 +20,78 @@
 // https://forum.pjrc.com/threads/34855-Distorted-audio-when-using-USB-input-on-Teensy-3-1
 //#define MACOSX_ADAPTIVE_LIMIT
 
-bool AudioInputUSB::update_responsibility;
-audio_block_t * AudioInputUSB::incoming_left;
-audio_block_t * AudioInputUSB::incoming_right;
-audio_block_t * AudioInputUSB::ready_left;
-audio_block_t * AudioInputUSB::ready_right;
-uint16_t AudioInputUSB::incoming_count;
-uint8_t AudioInputUSB::receive_flag;
-
-struct usb_audio_features_struct AudioInputUSB::features = {0,0,FEATURE_MAX_VOLUME/2};
-
-#define DMABUFATTR __attribute__ ((section(".dmabuffers"), aligned (4)))
-uint16_t usb_audio_receive_buffer[AUDIO_RX_SIZE/2] DMABUFATTR;
-uint32_t usb_audio_sync_feedback DMABUFATTR;
-uint8_t usb_audio_receive_setting=0;
-
-static uint32_t feedback_accumulator = 185042824;
-
-void AudioInputUSB::begin(void)
+int fifo_read(struct fifo_t *f, uint32_t *a)
 {
-	incoming_count = 0;
-	incoming_left = NULL;
-	incoming_right = NULL;
-	ready_left = NULL;
-	ready_right = NULL;
-	receive_flag = 0;
-	// update_responsibility = update_setup();
-	// TODO: update responsibility is tough, partly because the USB
-	// interrupts aren't sychronous to the audio library block size,
-	// but also because the PC may stop transmitting data, which
-	// means we no longer get receive callbacks from usb_dev.
-	update_responsibility = false;
-	usb_audio_sync_feedback = feedback_accumulator >> 8;
-}
-
-static void copy_to_buffers(const uint32_t *src, int16_t *left, int16_t *right, unsigned int len)
-{
-	uint32_t *target = (uint32_t*) src + len; 
-	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
-		uint32_t n = *src++;
-		*left++ = n & 0xFFFF;
-		*right++ = n >> 16;
+	if (f->tail != f->head) {		// see if any data is available
+		*a = f->buf[f->tail];		// grab a byte from the buffer
+		f->tail++;			// increment the tail
+		if (f->tail == f->size) {	// check for wrap-around
+			f->tail = 0;
+		}
+	} else {
+		*a = 0;
+		return 0; // number of bytes read
 	}
-
-	while ((src < target - 2)) {
-		uint32_t n1 = *src++;
-		uint32_t n = *src++;
-		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
-		left+=2;
-		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
-		right+=2;
-	}
-
-	while ((src < target)) {
-		uint32_t n = *src++;
-		*left++ = n & 0xFFFF;
-		*right++ = n >> 16;
-	}
+	return 1;
 }
 
-// Called from the USB interrupt when an isochronous packet arrives
-// we must completely remove it from the receive buffer before returning
-//
-void usb_audio_receive_callback(unsigned int len)
+int fifo_write(struct fifo_t *f, const uint32_t *buf, int n)
 {
-	unsigned int count, avail;
-	audio_block_t *left, *right;
-	const uint32_t *data;
+	const uint32_t *p = buf;
 
-	AudioInputUSB::receive_flag = 1;
-	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
-	data = (const uint32_t *)usb_audio_receive_buffer;
-
-	count = AudioInputUSB::incoming_count;
-	left = AudioInputUSB::incoming_left;
-	right = AudioInputUSB::incoming_right;
-	if (left == NULL) {
-		left = AudioStream::allocate();
-		if (left == NULL) return;
-		AudioInputUSB::incoming_left = left;
-	}
-	if (right == NULL) {
-		right = AudioStream::allocate();
-		if (right == NULL) return;
-		AudioInputUSB::incoming_right = right;
-	}
-	while (len > 0) {
-		avail = AUDIO_BLOCK_SAMPLES - count;
-		if (len < avail) {
-			copy_to_buffers(data, left->data + count, right->data + count, len);
-			AudioInputUSB::incoming_count = count + len;
-			return;
-		} else if (avail > 0) {
-			copy_to_buffers(data, left->data + count, right->data + count, avail);
-			data += avail;
-			len -= avail;
-			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) {
-				// buffer overrun, PC sending too fast
-				AudioInputUSB::incoming_count = count + avail;
-				//if (len > 0) {
-					//serial_print("!");
-					//serial_phex(len);
-				//}
-				return;
-			}
-			send:
-			AudioInputUSB::ready_left = left;
-			AudioInputUSB::ready_right = right;
-			//if (AudioInputUSB::update_responsibility) AudioStream::update_all();
-			left = AudioStream::allocate();
-			if (left == NULL) {
-				AudioInputUSB::incoming_left = NULL;
-				AudioInputUSB::incoming_right = NULL;
-				AudioInputUSB::incoming_count = 0;
-				return;
-			}
-			right = AudioStream::allocate();
-			if (right == NULL) {
-				AudioStream::release(left);
-				AudioInputUSB::incoming_left = NULL;
-				AudioInputUSB::incoming_right = NULL;
-				AudioInputUSB::incoming_count = 0;
-				return;
-			}
-			AudioInputUSB::incoming_left = left;
-			AudioInputUSB::incoming_right = right;
-			count = 0;
+	for (int i=0; i<n; i++) {
+		// first check to see if there is space in the buffer
+		if ((f->head+1 == f->tail) || ((f->head+1 == f->size) && (f->tail == 0))) {
+			debug("No more room!\n");
+			return i;	// no more room
 		} else {
-			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
-			goto send; // recover from buffer overrun
+			f->buf[f->head] = *p++;
+			f->head++;	// increment the head
+			if (f->head == f->size) {	// check for wrap-around
+				f->head = 0;
+			}
 		}
 	}
-	AudioInputUSB::incoming_count = count;
+	return n;
 }
 
-void AudioInputUSB::update(void)
-{
-	audio_block_t *left, *right;
+uint32_t usb_audio_data[1024];
+struct fifo_t usb_audio_fifo = {
+	usb_audio_data, 0, 0, 1024,
+};
 
-	__disable_irq();
-	left = ready_left;
-	ready_left = NULL;
-	right = ready_right;
-	ready_right = NULL;
-	uint16_t c = incoming_count;
-	uint8_t f = receive_flag;
-	receive_flag = 0;
-	__enable_irq();
-	if (f) {
-		int diff = AUDIO_BLOCK_SAMPLES/2 - (int)c;
-		feedback_accumulator += diff / 3;
-		uint32_t feedback = (feedback_accumulator >> 8) + diff * 100;
-#ifdef MACOSX_ADAPTIVE_LIMIT
-		if (feedback > 722698) feedback = 722698;
-#endif
-		usb_audio_sync_feedback = feedback;
-		//if (diff > 0) {
-			//serial_print(".");
-		//} else if (diff < 0) {
-			//serial_print("^");
-		//}
-	}
-	//serial_phex(c);
-	//serial_print(".");
-	if (!left || !right) {
-		//serial_print("#"); // buffer underrun - PC sending too slow
-		//if (f) feedback_accumulator += 10 << 8;
-	}
-	if (left) {
-		transmit(left, 0);
-		release(left);
-	}
-	if (right) {
-		transmit(right, 1);
-		release(right);
-	}
-}
+struct usb_audio_features_struct features = {0, 0, FEATURE_MAX_VOLUME};
 
+#define DMABUFATTR __attribute__ ((section(".dmabuffers"), aligned (4)))
+uint16_t usb_audio_receive_buffer[AUDIO_RX_SIZE/2] DMABUFATTR;
+uint32_t usb_audio_sync_feedback DMABUFATTR = 185042824/256;
+//uint32_t usb_audio_sync_feedback DMABUFATTR = 723700; // too fast?
+//uint32_t usb_audio_sync_feedback DMABUFATTR = 722698; // Mac
+//uint32_t usb_audio_sync_feedback DMABUFATTR = 730000;
+uint8_t usb_audio_receive_setting = 0;
+//static uint32_t feedback_accumulator = 185042824;
+//usb_audio_sync_feedback = feedback_accumulator >> 8;
 
-
-
-
-
-
-bool AudioOutputUSB::update_responsibility;
-audio_block_t * AudioOutputUSB::left_1st;
-audio_block_t * AudioOutputUSB::left_2nd;
-audio_block_t * AudioOutputUSB::right_1st;
-audio_block_t * AudioOutputUSB::right_2nd;
-uint16_t AudioOutputUSB::offset_1st;
-
-
-uint16_t usb_audio_transmit_buffer[AUDIO_TX_SIZE/2] DMABUFATTR;
-uint8_t usb_audio_transmit_setting=0;
-
-void AudioOutputUSB::begin(void)
+// Called from the USB interrupt when an isochronous packet arrives
+// we must completely remove it from the receive buffer before returning
+void usb_audio_receive_callback(unsigned int len)
 {
-	update_responsibility = false;
-	left_1st = NULL;
-	right_1st = NULL;
+	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
+	fifo_write(&usb_audio_fifo, (uint32_t*)usb_audio_receive_buffer, len);
+	//debug("+");
 }
 
-static void copy_from_buffers(uint32_t *dst, int16_t *left, int16_t *right, unsigned int len)
-{
-	// TODO: optimize...
-	while (len > 0) {
-		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
-		len--;
-	}
-}
 
-void AudioOutputUSB::update(void)
-{
-	audio_block_t *left, *right;
+uint16_t usb_audio_transmit_buffer[AUDIO_TX_SIZE/2] DMABUFATTR;
+uint8_t usb_audio_transmit_setting = 0;
 
-	left = receiveReadOnly(0); // input 0 = left channel
-	right = receiveReadOnly(1); // input 1 = right channel
-	if (usb_audio_transmit_setting == 0) {
-		if (left) release(left);
-		if (right) release(right);
-		if (left_1st) { release(left_1st); left_1st = NULL; }
-		if (left_2nd) { release(left_2nd); left_2nd = NULL; }
-		if (right_1st) { release(right_1st); right_1st = NULL; }
-		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
-		offset_1st = 0;
-		return;
-	}
-	if (left == NULL) {
-		if (right == NULL) return;
-		right->ref_count++;
-		left = right;
-	} else if (right == NULL) {
-		left->ref_count++;
-		right = left;
-	}
-	__disable_irq();
-	if (left_1st == NULL) {
-		left_1st = left;
-		right_1st = right;
-		offset_1st = 0;
-	} else if (left_2nd == NULL) {
-		left_2nd = left;
-		right_2nd = right;
-	} else {
-		// buffer overrun - PC is consuming too slowly
-		audio_block_t *discard1 = left_1st;
-		left_1st = left_2nd;
-		left_2nd = left;
-		audio_block_t *discard2 = right_1st;
-		right_1st = right_2nd;
-		right_2nd = right;
-		offset_1st = 0; // TODO: discard part of this data?
-		//serial_print("*");
-		release(discard1);
-		release(discard2);
-	}
-	__enable_irq();
-}
-
-
 // Called from the USB interrupt when ready to transmit another
 // isochronous packet.  If we place data into the transmit buffer,
 // the return is the number of bytes.  Otherwise, return 0 means
 // no data to transmit
-unsigned int usb_audio_transmit_callback(void)
+unsigned int usb_audio_transmit_callback()
 {
-	static uint32_t count=5;
+	/*static uint32_t count=5;
 	uint32_t avail, num, target, offset, len=0;
 	audio_block_t *left, *right;
 
@@ -318,15 +103,15 @@
 	}
 	while (len < target) {
 		num = target - len;
-		left = AudioOutputUSB::left_1st;
+		left = left_1st;
 		if (left == NULL) {
 			// buffer underrun - PC is consuming too quickly
 			memset(usb_audio_transmit_buffer + len, 0, num * 4);
 			//serial_print("%");
 			break;
 		}
-		right = AudioOutputUSB::right_1st;
-		offset = AudioOutputUSB::offset_1st;
+		right = right_1st;
+		offset = offset_1st;
 
 		avail = AUDIO_BLOCK_SAMPLES - offset;
 		if (num > avail) num = avail;
@@ -338,102 +123,100 @@
 		if (offset >= AUDIO_BLOCK_SAMPLES) {
 			AudioStream::release(left);
 			AudioStream::release(right);
-			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
-			AudioOutputUSB::left_2nd = NULL;
-			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
-			AudioOutputUSB::right_2nd = NULL;
-			AudioOutputUSB::offset_1st = 0;
+			left_1st = left_2nd;
+			left_2nd = NULL;
+			right_1st = right_2nd;
+			right_2nd = NULL;
+			offset_1st = 0;
 		} else {
-			AudioOutputUSB::offset_1st = offset;
+			offset_1st = offset;
 		}
 	}
-	return target * 4;
+	return target * 4;*/
+	debug("usb_audio_transmit_callback\n");
+	return 45*4;
 }
 
 
 struct setup_struct {
-  union {
-    struct {
-	uint8_t bmRequestType;
-	uint8_t bRequest;
 	union {
 		struct {
-			uint8_t bChannel;  // 0=main, 1=left, 2=right
-			uint8_t bCS;       // Control Selector
+			uint8_t bmRequestType;
+			uint8_t bRequest;
+			union {
+				struct {
+					uint8_t bChannel;  // 0=main, 1=left, 2=right
+					uint8_t bCS;       // Control Selector
+				};
+				uint16_t wValue;
+			};
+			union {
+				struct {
+					uint8_t bIfEp;     // type of entity
+					uint8_t bEntityId; // UnitID, TerminalID, etc.
+				};
+				uint16_t wIndex;
+			};
+			uint16_t wLength;
 		};
-		uint16_t wValue;
 	};
-	union {
-		struct {
-			uint8_t bIfEp;     // type of entity
-			uint8_t bEntityId; // UnitID, TerminalID, etc.
-		};
-		uint16_t wIndex;
-	};
-	uint16_t wLength;
-    };
-  };
 };
 
 int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen)
 {
 	struct setup_struct setup = *((struct setup_struct *)stp);
 	if (setup.bmRequestType==0xA1) { // should check bRequest, bChannel, and UnitID
-			if (setup.bCS==0x01) { // mute
-				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
-				*datalen = 1;
-				return 1;
+		if (setup.bCS==0x01) { // mute
+			data[0] = features.mute;  // 1=mute, 0=unmute
+			*datalen = 1;
+			return 1;
+		} else if (setup.bCS==0x02) { // volume
+			if (setup.bRequest==0x81) { // GET_CURR
+				data[0] = features.volume & 0xFF;
+				data[1] = (features.volume>>8) & 0xFF;
+			} else if (setup.bRequest==0x82) { // GET_MIN
+				//serial_print("vol get_min\n");
+				data[0] = 0;     // min level is 0
+				data[1] = 0;
+			} else if (setup.bRequest==0x83) { // GET_MAX
+				data[0] = FEATURE_MAX_VOLUME & 0xFF;  // max level, for range of 0 to MAX
+				data[1] = (FEATURE_MAX_VOLUME>>8) & 0x0F;
+			} else if (setup.bRequest==0x84) { // GET_RES
+				data[0] = 1; // increment vol by by 1
+				data[1] = 0;
+			} else { // pass over SET_MEM, etc.
+				return 0;
 			}
-			else if (setup.bCS==0x02) { // volume
-				if (setup.bRequest==0x81) { // GET_CURR
-					data[0] = AudioInputUSB::features.volume & 0xFF;
-					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
-				}
-				else if (setup.bRequest==0x82) { // GET_MIN
-					//serial_print("vol get_min\n");
-					data[0] = 0;     // min level is 0
-					data[1] = 0;
-				}
-				else if (setup.bRequest==0x83) { // GET_MAX
-					data[0] = FEATURE_MAX_VOLUME & 0xFF;  // max level, for range of 0 to MAX
-					data[1] = (FEATURE_MAX_VOLUME>>8) & 0x0F;
-				}
-				else if (setup.bRequest==0x84) { // GET_RES
-					data[0] = 1; // increment vol by by 1
-					data[1] = 0;
-				}
-				else { // pass over SET_MEM, etc.
-					return 0;
-				}
-				*datalen = 2;
-				return 1;
-			}
+			*datalen = 2;
+			return 1;
+		}
+		debug("usb_audio_get_feature: %d\n", setup.bmRequestType);
 	}
 	return 0;
 }
 
-int usb_audio_set_feature(void *stp, uint8_t *buf) 
+int usb_audio_set_feature(void *stp, uint8_t *buf)
 {
 	struct setup_struct setup = *((struct setup_struct *)stp);
 	if (setup.bmRequestType==0x21) { // should check bRequest, bChannel and UnitID
-			if (setup.bCS==0x01) { // mute
-				if (setup.bRequest==0x01) { // SET_CUR
-					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
-					AudioInputUSB::features.change = 1;
-					return 1;
-				}
+		if (setup.bCS==0x01) { // mute
+			if (setup.bRequest==0x01) { // SET_CUR
+				features.mute = buf[0]; // 1=mute,0=unmute
+				features.change = 1;
+				return 1;
 			}
-			else if (setup.bCS==0x02) { // volume
-				if (setup.bRequest==0x01) { // SET_CUR
-					AudioInputUSB::features.volume = buf[0] + (buf[1]<<8);
-					AudioInputUSB::features.change = 1;
-					return 1;
-				}
+		} else if (setup.bCS==0x02) { // volume
+			if (setup.bRequest==0x01) { // SET_CUR
+				features.volume = buf[0] + (buf[1]<<8);
+				features.change = 1;
+				return 1;
 			}
+		}
 	}
+	debug("usb_audio_set_feature: %d\n", setup.bmRequestType);
 	return 0;
 }
 
-
 #endif // F_CPU
 #endif // AUDIO_INTERFACE
+
--- teensy3.orig/usb_audio.h
+++ teensy3/usb_audio.h
@@ -1,75 +1,45 @@
+// Berry Audio
+// Â©2017 Yuichiro Nakada
+
 #ifndef USBaudio_h_
 #define USBaudio_h_
 
 #include "usb_desc.h"
 #ifdef AUDIO_INTERFACE
 
-#define FEATURE_MAX_VOLUME 0xFFF  // volume accepted from 0 to 0xFFF
+#define FEATURE_MAX_VOLUME 0xFF  // volume accepted from 0 to 0xFF
 
 #ifdef __cplusplus
 extern "C" {
 #endif
+
 extern uint16_t usb_audio_receive_buffer[];
 extern uint16_t usb_audio_transmit_buffer[];
 extern void usb_audio_receive_callback(unsigned int len);
-extern unsigned int usb_audio_transmit_callback(void);
+extern unsigned int usb_audio_transmit_callback();
 int usb_audio_set_feature(void *stp, uint8_t *buf);
 int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen);
 
 extern uint32_t usb_audio_sync_feedback;
 extern uint8_t usb_audio_receive_setting;
 extern uint8_t usb_audio_transmit_setting;
+
+struct fifo_t {
+	uint32_t *buf;
+	int head;
+	int tail;
+	int size;
+};
+extern struct fifo_t usb_audio_fifo;
+int fifo_read(struct fifo_t *f, uint32_t *a);
 #ifdef __cplusplus
 }
 
 // audio features supported
 struct usb_audio_features_struct {
-  int change;  // set to 1 when any value is changed
-  int mute;    // 1=mute, 0=unmute
-  int volume;  // volume from 0 to FEATURE_MAX_VOLUME, maybe should be float from 0.0 to 1.0
-};
-
-#include "AudioStream.h"
-
-class AudioInputUSB : public AudioStream
-{
-public:
-	AudioInputUSB(void) : AudioStream(0, NULL) { begin(); }
-	virtual void update(void);
-	void begin(void);
-	friend void usb_audio_receive_callback(unsigned int len);
-	friend int usb_audio_set_feature(void *stp, uint8_t *buf);
-	friend int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen);
-	static struct usb_audio_features_struct features;
-	float volume(void) {
-		if (features.mute) return 0.0;
-		return (float)(features.volume) * (1.0 / (float)FEATURE_MAX_VOLUME);
-	}
-private:
-	static bool update_responsibility;
-	static audio_block_t *incoming_left;
-	static audio_block_t *incoming_right;
-	static audio_block_t *ready_left;
-	static audio_block_t *ready_right;
-	static uint16_t incoming_count;
-	static uint8_t receive_flag;
-};
-
-class AudioOutputUSB : public AudioStream
-{
-public:
-	AudioOutputUSB(void) : AudioStream(2, inputQueueArray) { begin(); }
-	virtual void update(void);
-	void begin(void);
-	friend unsigned int usb_audio_transmit_callback(void);
-private:
-	static bool update_responsibility;
-	static audio_block_t *left_1st;
-	static audio_block_t *left_2nd;
-	static audio_block_t *right_1st;
-	static audio_block_t *right_2nd;
-	static uint16_t offset_1st;
-	audio_block_t *inputQueueArray[2];
+	int change;  // set to 1 when any value is changed
+	int mute;    // 1=mute, 0=unmute
+	int volume;  // volume from 0 to FEATURE_MAX_VOLUME, maybe should be float from 0.0 to 1.0
 };
 
 #endif // __cplusplus
--- teensy3.orig/usb_desc.c
+++ teensy3/usb_desc.c
@@ -91,7 +91,18 @@
         1,                                      // iManufacturer
         2,                                      // iProduct
         3,                                      // iSerialNumber
-        1                                       // bNumConfigurations
+        1,                                      // bNumConfigurations
+
+	// Device Qualifier
+/*	10,					// bLength
+	6,					// bDescriptorType: Device Qualifier
+	0x00, 0x02,				// bcdUSB
+	0,					// bDeviceClass
+	0,					// bDeviceSubClass
+	0,					// bDeviceSubSubClass
+	0,					// Maximum packet size
+	1,					// bDeviceProtocol
+	0,					// Reserved*/
 };
 
 // These descriptors must NOT be "const", because the USB DMA
@@ -542,7 +553,8 @@
 
 #define AUDIO_INTERFACE_DESC_POS	KEYMEDIA_INTERFACE_DESC_POS+KEYMEDIA_INTERFACE_DESC_SIZE
 #ifdef  AUDIO_INTERFACE
-#define AUDIO_INTERFACE_DESC_SIZE	8 + 9+10+12+9+12+10+9 + 9+9+7+11+9+7 + 9+9+7+11+9+7+9
+//#define AUDIO_INTERFACE_DESC_SIZE	8 + 9+10+12+9+12+10+9 + 9+9+7+11+9+7 + 9+9+7+11+9+7+9
+#define AUDIO_INTERFACE_DESC_SIZE	8 + 9+10+12+9+12+10+9 + 9+9+7+(11+3)+9+7 + 9+9+7+(11+3)+9+7+9
 #else
 #define AUDIO_INTERFACE_DESC_SIZE	0
 #endif
@@ -569,7 +581,7 @@
         // configuration descriptor, USB spec 9.6.3, page 264-266, Table 9-10
         9,                                      // bLength;
         2,                                      // bDescriptorType;
-        LSB(CONFIG_DESC_SIZE),                 // wTotalLength
+        LSB(CONFIG_DESC_SIZE),                  // wTotalLength
         MSB(CONFIG_DESC_SIZE),
         NUM_INTERFACE,                          // bNumInterfaces
         1,                                      // bConfigurationValue
@@ -1117,15 +1129,18 @@
 	0x01, 0x00,				// wFormatTag, 0x0001 = PCM
 	// Type I Format Descriptor
 	// USB DCD for Audio Data Formats 1.0, Section 2.2.5, Table 2-1, page 10
-	11,					// bLength
+//	11,					// bLength
+	11+3,					// bLength
 	0x24,					// bDescriptorType = CS_INTERFACE
 	2,					// bDescriptorSubtype = FORMAT_TYPE
 	1,					// bFormatType = FORMAT_TYPE_I
 	2,					// bNrChannels = 2
 	2,					// bSubFrameSize = 2 byte
 	16,					// bBitResolution = 16 bits
-	1,					// bSamFreqType = 1 frequency
+//	1,					// bSamFreqType = 1 frequency
+	2,					// bSamFreqType = 2 frequency
 	LSB(44100), MSB(44100), 0,		// tSamFreq
+	LSB(48000), MSB(48000), 0,		// tSamFreq
 	// Standard AS Isochronous Audio Data Endpoint Descriptor
 	// USB DCD for Audio Devices 1.0, Section 4.6.1.1, Table 4-20, page 61-62
 	9, 					// bLength
@@ -1176,15 +1191,18 @@
 	0x01, 0x00,				// wFormatTag, 0x0001 = PCM
 	// Type I Format Descriptor
 	// USB DCD for Audio Data Formats 1.0, Section 2.2.5, Table 2-1, page 10
-	11,					// bLength
+//	11,					// bLength
+	11+3,					// bLength
 	0x24,					// bDescriptorType = CS_INTERFACE
 	2,					// bDescriptorSubtype = FORMAT_TYPE
 	1,					// bFormatType = FORMAT_TYPE_I
 	2,					// bNrChannels = 2
 	2,					// bSubFrameSize = 2 byte
 	16,					// bBitResolution = 16 bits
-	1,					// bSamFreqType = 1 frequency
+//	1,					// bSamFreqType = 1 frequency
+	2,					// bSamFreqType = 2 frequency
 	LSB(44100), MSB(44100), 0,		// tSamFreq
+	LSB(48000), MSB(48000), 0,		// tSamFreq
 	// Standard AS Isochronous Audio Data Endpoint Descriptor
 	// USB DCD for Audio Devices 1.0, Section 4.6.1.1, Table 4-20, page 61-62
 	9, 					// bLength
--- teensy3.orig/usb_desc.h
+++ teensy3/usb_desc.h
@@ -527,13 +527,14 @@
 #elif defined(USB_AUDIO)
   #define VENDOR_ID		0x16C0
   #define PRODUCT_ID		0x04D2
-  #define MANUFACTURER_NAME	{'T','e','e','n','s','y','d','u','i','n','o'}
-  #define MANUFACTURER_NAME_LEN	11
-  #define PRODUCT_NAME		{'T','e','e','n','s','y',' ','A','u','d','i','o'}
-  #define PRODUCT_NAME_LEN	12
+  #define MANUFACTURER_NAME	{'B','e','r','r','y',' ','I','n','c','.'}
+  #define MANUFACTURER_NAME_LEN	10
+  #define PRODUCT_NAME		{'B','e','r','r','y',' ','A','u','d','i','o'}
+  #define PRODUCT_NAME_LEN	11
   #define EP0_SIZE		64
   #define NUM_ENDPOINTS         5
   #define NUM_USB_BUFFERS	16
+  //#define NUM_INTERFACE		3
   #define NUM_INTERFACE		4
   #define SEREMU_INTERFACE      0	// Serial emulation
   #define SEREMU_TX_ENDPOINT    1
--- teensy3.orig/usb_dev.c
+++ teensy3/usb_dev.c
@@ -428,8 +428,7 @@
 	  case 0x84A1:
 	  	if (usb_audio_get_feature(&setup, reply_buffer, &datalen)) {
 	  		data = reply_buffer;
-	  	}
-	  	else {
+	  	} else {
 	  		endpoint0_stall();
 	  		return;
 	  	}
--- teensy3.orig/yield.cpp
+++ teensy3/yield.cpp
@@ -40,6 +40,7 @@
 
 	if (running) return; // TODO: does this need to be atomic?
 	running = 1;
+#ifdef  SEREMU_INTERFACE
 	if (Serial.available()) serialEvent();
 	if (Serial1.available()) serialEvent1();
 	if (Serial2.available()) serialEvent2();
@@ -52,6 +53,7 @@
 #endif
 #if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
 	if (Serial6.available()) serialEvent6();
+#endif
 #endif
 	running = 0;
 };
